//MANQUE TABLE EXPLOITANT

// 1. Source de données
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL")
}

// 2. Générateur de client
generator client {
  provider = "prisma-client-js"
}

// 3. Enums
enum RegimeCode {
  REAL
  MICRO
}

enum Civilite {
  M    // Monsieur
  MM   // Madame
}

enum AmortMethode {
  LINEAIRE
  DEGRESSIF
}

// 4. Modèles (tables)


//Profile
model Profile {
  oid                 BigInt   @id
  prTexte             String   @db.VarChar(255)
  nif                 String   @db.VarChar(255)
  nifReadonly         Boolean  @map("nif_readonly")
  civilite            Civilite?
  nom                 String   @db.VarChar(100)
  nomUsage            String?  @db.VarChar(100)
  activiteReadonly    Boolean
  prenom              String   @db.VarChar(100)
  email               String?  @db.VarChar(255)
  telephonePersoNum   String?  @db.VarChar(50)
  telephoneMobileNum  String?  @db.VarChar(50)

  @@map("profile")
}


//Activity
model Activity {
  id                       BigInt           @id @map("Oid")
  prTexte                  String
  canModify                Boolean
  integrale                Boolean
  raisonSociale            String
  coExploitation           Boolean
  numeroSIRET              String
  tva                      Boolean
  rofReadonly              Boolean
  numeroTVA                String
  debutActivite            DateTime
  debutRegimeReel          String?
  anneeDebutCompta         Int
  premiereAnneeOuverte     Int
  offre                    String
  derniereAnneeFermee      Int
  canInitiate              Boolean
  finActivite              String?
  finActiviteCause         Int
  dateCauseCessation       String?
  fraisAcquisition         Int
  fraisAcquisitionAnnee    Int
  fraisAcquisitionLabel    String
  annees                   Int
  anneeCloturee            Boolean
  fraisAcquisitionConfirmer Boolean
  fraisAcquisitionOption   Boolean
  modifierDebutActivite    Boolean
  nbreActivite             Int
  hasPaiedYear             Boolean

  // relations
  formeJuridique   FormeJuridique? @relation("FormeJuridique_Activities",fields: [formeJuridiqueOid], references: [Oid])
  formeJuridiqueOid BigInt?

  rof         RoF? @relation("Entreprise_ROF", fields: [rofOid], references: [Oid])
  rofOid      BigInt?

  roftva      RoF? @relation("Entreprise_ROFTVA", fields: [roftvaOid], references: [Oid])
  roftvaOid   BigInt?

  sie         SIE? @relation(fields: [sieOid], references: [Oid])
  sieOid      BigInt?

  societe     Societe? @relation(fields: [societeOid], references: [Oid])
  societeOid  BigInt?

  adresse     Adresse? @relation(fields: [adresseId], references: [id])
  adresseId   BigInt?

  client      Client?  @relation(fields: [clientId], references: [id])
  clientId    BigInt?

  logements    Logement[]
  fiscalYears   FiscalYear[]   @relation("Activity_FiscalYears")

  immobilisations Immobilisation[]
  emprunts Emprunt[]
  operations Operation[]
  composants Composant[]


  @@map("Activity")
}

model FormeJuridique {
  Oid      BigInt  @id
  prTexte  String
  invalid  Boolean
  activities Activity[] @relation("FormeJuridique_Activities")
}

model RoF {
  Oid                 BigInt  @id
  prTexte             String?
  entreprisesROF      Activity[] @relation("Entreprise_ROF")
  entreprisesROFTVA   Activity[] @relation("Entreprise_ROFTVA")
}

model SIE {
  Oid         BigInt @id
  prTexte     String
  email       String
  activities  Activity[]
}

model Societe {
  Oid         BigInt @id
  prTexte     String
  logoUrl     String
  activities  Activity[]
}

model Adresse {
  id                BigInt   @id @default(autoincrement())
  numeroRue         String
  adresse           String
  adresseComplement String?
  codePostal        String
  ville             String
  etatTexte         String?
  etatMnem          String?
  paysTexte         String
  paysMnem          String

  activities        Activity[]
  logements           Logement[]
}

model Client {
  id         BigInt @id @default(autoincrement())
  // autres champs de contact possibles
  activities Activity[]
}

//Fiscal Year
model FiscalYear {
  id                   BigInt            @id @map("Oid")
  prTexte              String
  anneeFiscale         Int
  importCompta         Boolean
  importRCSV           Boolean
  importDCSV           Boolean
  repriseCompta        Boolean          @map("RepriseComptabilite")
  clotureVersion       Int
  status               Int
  debut                DateTime
  fin                  DateTime
  integrale            Boolean
  modeAvance           Boolean
  step                 Int
  firstYear            Boolean          @map("FirstYear")
  yearCount            Int              @map("YearCount")
  hasSIRET             Boolean          @map("HasSIRET")
  dateSoumission       String?
  numeroOGA            String
  reductionImpotOGA    Int              @map("ReductionImpotOGA")
  renoncerRIOGA        Boolean
  reductionImpotOGALabel String
  commentairesClient   String?
  repartitionVerifier  Boolean
  accesOGA             Boolean
  canCloture           Boolean          @map("CanCloture")
  validControls        Boolean          @map("ValidControls")
  testimonial          Boolean
  dernierControle      DateTime         @map("DernierControle")

  // Relations
  activityId           BigInt    @map("ActiviteId")
  activity             Activity  @relation("Activity_FiscalYears",fields: [activityId], references: [id], onDelete: Cascade)

  //societe              Societe?         @relation(fields: [societeOid], references: [Oid])
  //societeOid           BigInt?

  //devise               Devise?          @relation(fields: [deviseOid], references: [Oid])
  //deviseOid            BigInt?

  //calendrier           Calendrier?      @relation(fields: [calendrierId], references: [id])
  //calendrierId         BigInt?

  //liasse               Liasse?          @relation(fields: [liasseOid], references: [Oid])
  //liasseOid            BigInt?

  //teletrans            Teletrans?       @relation(fields: [teletransOid], references: [Oid])
  //teletransOid         BigInt?

  //oga                  OGA?             @relation(fields: [ogaOid], references: [Oid])
  //ogaOid               BigInt?

  //reductionDetails     ReductionDetails? @relation(fields: [reductionDetailsId], references: [id])
  //reductionDetailsId   BigInt?

  //articles   Article[]
  //immobilisations Immobilisation[]
  emprunts Emprunt[]
  operations Operation[]
  composants Composant[]

  @@map("fiscyear")
}


//model Devise {
//  Oid              BigInt          @id
//  prTexte          String
//  fiscalYears      FiscalYear[]
//}

//model Calendrier {
//  id                 BigInt          @id @default(autoincrement())
//  delaiTeletrans     Int
//  limiteLiasse       DateTime
//  limiteLiasseEx     DateTime
//  clotureBloquee     String?
//  teletransBloquee   String?
//  fiscalYear         FiscalYear?
//}

//model Liasse {
//  Oid             BigInt        @id
//  date            DateTime      @map("Date")
//  provisoire      Boolean
//  valide          Boolean
//  urlLiasse       String         @map("UrlLiasse")
//  url2042Cpro     String         @map("Url2042CPRO")
//  urlFEC          String         @map("UrlFEC")
//  url2042Cpros    String         @map("Url2042CPROS")
//  fiscalYear      FiscalYear?
//}

//model Teletrans {
//  Oid            BigInt      @id
//  date           String       @map("Date")
//  stateDate      String
//  statut         Int
//  erreurs        String?
// nature         String?
//  description    String?
//  libelle        String?
//  interchange    String
//  emailSIE       String       @map("EmailSIE")
//  adresseSIE     String       @map("AdresseSIE")
//  fiscalYear     FiscalYear?
//}

//model OGA {
//  Oid            BigInt      @id
//  prTexte        String
//  fiscalYears    FiscalYear[]
//}

//model ReductionDetails {
//  id               BigInt             @id @default(autoincrement())
//  // Colonnes can be stored as Json if needed
//  lignes           ReductionLine[]
//  fiscalYear       FiscalYear?
//}

//model ReductionLine {
//  id                 BigInt              @id @default(autoincrement())
//  critere            String
//  detail             String
//  eligible           Boolean
//  mnem               String
//  reductionDetails   ReductionDetails    @relation(fields: [reductionDetailsId], references: [id])
//  reductionDetailsId BigInt
//}


//Logement
model Logement {
  /// Identifiant unique du logement
  id                BigInt    @id @map("Oid")
  /// Libellé d’affichage (adresse complète)

  // PRofil Logement
  profilOid         BigInt
  libelle           String
  prTexte           String
  adresseVide       Boolean
  dateLocation      DateTime  @map("DateLocation")
  dateVente         DateTime? @map("DateVente")
  causeVente        Int       @map("CauseVente")
  dateAchat         DateTime  @map("DateAchat")
  dateApport        DateTime? @map("DateApport")
  adresseComplete   String
  superficie        Int
  nbPieces          Int       @map("NbPieces")
  classement        Int
  immobilise        Boolean
  dateModification  DateTime  @map("DateModification")
  status            Int

  /// Clé étrangère vers l’activité
  activityId        BigInt    @map("ActiviteId")
  activity          Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  /// Clé étrangère vers le profil propriétaire
  // PROFIL LOGEMENT
  //profilOid         BigInt?   @map("ProfilOid")
  //profil            Profile?  @relation(fields: [profilOid], references: [oid])

  /// Prix d’acquisition
  prixId            BigInt?   @map("Prix")
  prix              Price?    @relation("Logement_Prix", fields: [prixId], references: [id])

  /// Prix de vente
  prixVenteId       BigInt?   @map("PrixVente")
  prixVente         Price?    @relation("Logement_PrixVente", fields: [prixVenteId], references: [id])

  /// Adresse détaillée
  adresseId         BigInt?
  adresse           Adresse?  @relation(fields: [adresseId], references: [id])

  immobilisations Immobilisation[]

  emprunts  Emprunt[]  @relation("LogementEmprunts")
  operations Operation[]
  composants Composant[]

  @@map("logement")
}


model Price {
  id               BigInt    @id @default(autoincrement())
  montant          Decimal?  @db.Decimal(20,2)
  devise           String
  fmt              String

  logementsAchat   Logement[] @relation("Logement_Prix")
  logementsVente   Logement[] @relation("Logement_PrixVente")
}


//Articles soit le MODELE COMPTABLE

model Famille {
  id          BigInt   @id @map("familleid")
  mnem        String   @db.VarChar(50)
  codeFiscal  Int

  Article     Article[]
  @@map("famille")
}

model Compte {
  id        BigInt   @id @map("compteid")
  mnem      String   @db.VarChar(10)
  caseCerfa String?  @db.VarChar(155)

  Article   Article[]
  @@map("compte")
}



model Article {
  id                       BigInt      @id @map("Oid")
  masked                   Boolean
  mnem                     String?   @db.VarChar(20)
  prTexte                  String    @db.VarChar(255)
  description              String?
  groupe                   String?
  nonLiee                  Boolean
  docPrixMin               Decimal?  @db.Decimal(10,2)
  docRequired              Boolean
  immoAjout                Boolean
  immoGroupe               Int?
  immoPrixMini             Decimal?  @db.Decimal(12,2)
  commentRequired          Boolean
  dureeMini                Int
  dureeMaxi                Int
  dureeDefaut              Int
  dureeRequis              Boolean
  modeAvance               Boolean
  exploitantRequis         Boolean
  periodeRequis            Boolean
  immoAide                 String?
  groupeSaisie             String?
  duplicateMonth           Boolean

  familleOid               BigInt
  famille                  Famille   @relation(fields: [familleOid], references: [id], onDelete: Cascade)
  compteOid                BigInt?
  compte                   Compte?   @relation(fields: [compteOid], references: [id], onDelete: Cascade)

  // A prior id de fiscalYear - bizarre non? 
  // DEVRAIT ËTRE LIEE A ANNEE CALENDAIRE //
  // fiscalYear         FiscalYear  @relation(fields: [anneeId], references: [id])
  // anneeId            BigInt

  Operation                Operation[]
  ArticleLinked_groupOid   ArticleLinked[] @relation("ArticleLinked_groupOidToArticle")
  ArticleLinked_linkedOid  ArticleLinked[] @relation("ArticleLinked_linkedOidToArticle")

  immobilisations Immobilisation[]
  composants Composant[]

  @@map("article")
}

model ArticleLinked {
  groupOid  BigInt
  linkedOid BigInt

  group     Article  @relation("ArticleLinked_groupOidToArticle", fields: [groupOid], references: [id])
  linked    Article  @relation("ArticleLinked_linkedOidToArticle", fields: [linkedOid], references: [id])

  @@id([groupOid, linkedOid])
  @@map("articlelinked")
}


// Immobilisation
model Immobilisation {
  id                 BigInt      @id @map("Oid")
  prTexte            String      @map("prTexte")
  libelle            String
  dateFinalisee      DateTime?   @map("DateFinalisee")
  miseEnService      DateTime    @map("MiseEnService")
  duree              Int         @map("Duree")
  dateSortie         DateTime?   @map("DateSortie")
  valeurSortieMontant Float      @map("ValeurSortie.montant")
  valeurSortieDevise String     @map("ValeurSortie.devise")
  valeurSortieFmt    String     @map("ValeurSortie.fmt")
  causeSortie        Int         @map("CauseSortie")
  valeurCauseSortie  String?     @map("ValeurCauseSortie")
  status             Int         @map("Status")

  // Prix aplati
  prixMontant        Float       @map("Prix.montant")
  prixDevise         String      @map("Prix.devise")
  prixFmt            String      @map("Prix.fmt")

  // Relations
  article            Article     @relation(fields: [articleOid], references: [id])
  articleOid         BigInt      @map("Article.Oid")

  logement           Logement    @relation(fields: [logementOid], references: [id])
  logementOid        BigInt      @map("Logement.Oid")

  activityId           BigInt    @map("ActiviteId")
  activity             Activity  @relation(fields: [activityId], references: [id], onDelete:Cascade)

  //fiscalYear         FiscalYear  @relation(fields: [anneeId], references: [id])
  //anneeId            BigInt

  operations Operation[]

  @@map("immobilisation")
  @@index([activityId])
}

// Composant - Composition du Logement (Actif)

model Composant {
  id                BigInt       @id @map("Oid")
  amortissable      Boolean   @map("Amortissable")
  ventilation       Float     @map("Ventilation")
  miseEnService     DateTime  @map("MiseEnService")
  dateSortie        DateTime? @map("DateSortie")
  causeSortie       Int       @map("CauseSortie")
  status            Int       @map("Status")
  duree             Int       @map("Duree")

  // PrixProfil
  prixProfilMontant Float     @map("PrixProfil_montant")
  prixProfilDevise  String    @map("PrixProfil_devise")
  prixProfilFmt     String    @map("PrixProfil_fmt")

  // ValeurSortie
  valeurSortieMontant Float?  @map("ValeurSortie_montant")
  valeurSortieDevise  String? @map("ValeurSortie_devise")
  valeurSortieFmt     String? @map("ValeurSortie_fmt")

  // Relations
  article           Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId         BigInt       @map("ArticleOid")

  activityId           BigInt
  Activity             Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  fiscalYear         FiscalYear  @relation(fields: [anneeId], references: [id])
  anneeId            BigInt

  logementId    BigInt?
  logement      Logement?     @relation(fields: [logementId], references: [id])  

  
  @@map("Composants")
}

//Emprunt

model Emprunt {
  id                   BigInt    @id @map("Oid")
  prTexte              String
  libelle              String
  logementId           BigInt
  Logement             Logement    @relation("LogementEmprunts", fields: [logementId], references: [id])
  dateEmprunt          DateTime?
  dateEcheance         DateTime?
  dateConstitution     String?
  capitalEmprunte      Float
  capitalInitial       Float
  echeancesDiffere     Int
  capitalRestant       Float
  capitalRestantDate   DateTime?
  commentairesClient   String?
  partExclure          Int
  partActive           Int
  partVentile          Int
  taux                 Float
  tauxType             Int
  echeancesInterval    Int
  echeancesMontant     Float
  assuranceIncluse     Boolean
  assuranceType        Int
  assuranceTaux        Float
  assuranceMontant     Float
  deviseOid            Int       @map("DeviseOid")
  constitue            Boolean
  status               Int

  // Relations
  activityId           BigInt
  Activity             Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  fiscalYear         FiscalYear  @relation(fields: [anneeId], references: [id])
  anneeId            BigInt

}


// Opérations

model Operation {
  id            BigInt        @id @map("operationid")
  libelle       String?
  date          DateTime
  dateEcheance  DateTime?
  debut         DateTime?
  fin           DateTime?
  montantTtc    Decimal       @db.Decimal(12,2)
  montantTva    Decimal?      @db.Decimal(12,2)
  documentUrl   String?

  // Relations
  activityId           BigInt
  Activity             Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  fiscalYear       FiscalYear    @relation(fields: [anneeId],   references: [id])
  anneeId          BigInt

  logementId    BigInt?
  logement      Logement?     @relation(fields: [logementId], references: [id])
  
  articleId     BigInt?
  article       Article?      @relation(fields: [articleId], references: [id])
  
  payeurId      BigInt?
  payeur        Payeur?       @relation(fields: [payeurId], references: [id])
  
  immoId        BigInt?
  immobilisation Immobilisation? @relation(fields: [immoId], references: [id])

  @@map("operation")
}

model Payeur {
  id        BigInt    @id @map("payeurid")
  nom       String?

  Operation Operation[]
  @@map("payeur")
}

model CerfaDocument {
  id          String   @id @default(uuid())
  filename    String
  bucket      String   @default("cerfa")
  path        String   // ex. "userId/2031-sd_5028_2025-06.pdf"

  @@index([bucket])
}


// ---------------------  Modèle FEC  -----------------------------------
model FECEntry {
  // Clé technique auto-incrémentée (facilite les relations et la purge)
  id             Int       @id @default(autoincrement())

  // --- Champs obligatoires du FEC ------------------------------------
  JournalCode    String    @db.VarChar(5)    // ex : "VT", "AC"
  JournalLib     String    @db.VarChar(200)  // ex : "Ventes"
  EcritureNum    String    @db.VarChar(50)   // n° d’écriture séquentiel
  EcritureDate   DateTime  @db.Date          // AAAA-MM-JJ
  CompteNum      String    @db.VarChar(20)   // n° PCG ou IFRS
  CompteLib      String    @db.VarChar(200)  // libellé du compte
  CompAuxNum     String?   @db.VarChar(20)   // (optionnel) compte auxiliaire
  CompAuxLib     String?   @db.VarChar(200)  // (optionnel) libellé auxiliaire
  PieceRef       String?   @db.VarChar(200)  // réf. pièce justificative
  PieceDate      DateTime? @db.Date          // date de la pièce
  EcritureLib    String    @db.VarChar(200)  // libellé de l’écriture
  Debit          Decimal   @db.Decimal(18,2) // toujours renseigné (≥ 0)
  Credit         Decimal   @db.Decimal(18,2) // toujours renseigné (≥ 0)
  EcritureLet    String?   @db.VarChar(40)   // code de lettrage
  DateLet        DateTime? @db.Date          // date de lettrage
  ValidDate      DateTime? @db.Date          // date de validation
  Montantdevise  Decimal?  @db.Decimal(18,2) // montant en devise
  Idevise        String?   @db.Char(3)       // code ISO 4217 (ex : USD)

  // ------------------ Indexes & contraintes pratiques -----------------
  /// Garantit l’unicité d’une écriture dans un journal donné
  @@unique([JournalCode, EcritureNum])

  /// Accélère les exports par journal et par date
  @@index([JournalCode, EcritureDate])

  /// Nom physique de la table : "fec_entry"
  @@map("fec_entry")
}


/// Bridge fiscal (historique « plat »)
model FiscalBridge {
  id                  BigInt       @id @default(autoincrement())
  fiscalYearId        BigInt       @map("fiscal_year_id")
  fiscalYear          FiscalYear   @relation(fields: [fiscalYearId], references: [id])

  accountingResult    Decimal      @map("accounting_result") @db.Decimal(14,2)
  addBack39c          Decimal      @map("add_back_39c")      @db.Decimal(14,2)
  addBackOther        Decimal      @map("add_back_other")    @db.Decimal(14,2)
  taxResult           Decimal      @map("tax_result")        @db.Decimal(14,2)
  deficitUsed         Decimal      @map("deficit_used")      @db.Decimal(14,2)
  deficitCreated      Decimal      @map("deficit_created")   @db.Decimal(14,2)

  snapshotAt          DateTime     @map("snapshot_at")       @default(now())

  @@map("fiscal_bridge")
  @@unique([fiscalYearId, snapshotAt])
}

/// Déficits reportables (10 ans)
model TaxLoss {
  id                  BigInt       @id @default(autoincrement())
  logementId          BigInt?      @map("rental_unit_id")
  logement            Logement?    @relation(fields: [logementId], references: [id])

  originFyId          BigInt       @map("origin_fy_id")
  originFiscalYear    FiscalYear   @relation("TaxLossOrigin", fields: [originFyId], references: [id])

  amountOrigin        Decimal      @map("amount_origin") @db.Decimal(14,2)
  remaining           Decimal      @db.Decimal(14,2)
  expiresOn           DateTime     @map("expires_on")

  usages              TaxLossUsage[]

  @@map("tax_losses")
}

/// Imputations de déficit (historique d’usage)
model TaxLossUsage {
  id                  BigInt       @id @default(autoincrement())
  lossId              BigInt       @map("loss_id")
  loss                TaxLoss      @relation(fields: [lossId], references: [id])

  fiscalYearId        BigInt       @map("fiscal_year_id")
  fiscalYear          FiscalYear   @relation(fields: [fiscalYearId], references: [id])

  amountUsed          Decimal      @map("amount_used") @db.Decimal(14,2)
  createdAt           DateTime     @map("created_at") @default(now())

  @@map("tax_loss_usages")
  @@index([lossId, fiscalYearId])
}

/// Stock global d’amortissements reportables (Art. 39 C)
model DeferredDeprStock {
  id            BigInt      @id @default(autoincrement())
  activityId    BigInt      @map("rental_unit_id")      // ou `activity_id`
  activity      RentalUnit  @relation(fields: [activityId], references: [id])

  originFyId    BigInt      @map("origin_fy_id")
  originFy      FiscalYear  @relation(fields: [originFyId], references: [id])

  amountOrigin  Decimal     @map("amount_origin") @db.Decimal(14,2)
  remaining     Decimal     @db.Decimal(14,2)

  usages        DeprUsage[]

  @@map("deferred_depr_stock")
  @@index([activityId, originFyId])
}

/// Imputations du stock (année N)
model DeprUsage {
  id            BigInt      @id @default(autoincrement())

  stockId       BigInt      @map("stock_id")
  stock         DeferredDeprStock @relation(fields: [stockId], references: [id])

  fiscalYearId  BigInt      @map("fiscal_year_id")
  fiscalYear    FiscalYear  @relation(fields: [fiscalYearId], references: [id])

  amountUsed    Decimal     @map("amount_used") @db.Decimal(14,2)
  createdAt     DateTime    @map("created_at") @default(now())

  @@map("depr_usages")
  @@index([stockId, fiscalYearId])
}
