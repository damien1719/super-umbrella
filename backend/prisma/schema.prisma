generator clientPublic {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  schemas   = ["gestion", "psychomot", "public"]
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  role         UserRole      @default(THERAPIST)
  createdAt    DateTime      @default(now())
  authAccounts AuthAccount[]
  profile      Profile?

  invitedBilanTypeShares BilanTypeShare[] @relation("BilanTypeShare_invitedUser")
  invitedSectionShares   SectionShare[]   @relation("SectionShare_invitedUser")

  @@schema("public")
}

model AuthAccount {
  id                Int     @id @default(autoincrement())
  provider          String
  providerAccountId String
  email             String?
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  userId            String  @db.Uuid
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Profile {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String      @unique @db.Uuid
  civilite           Civilite?
  nom                String?     @db.VarChar(100)
  nomUsage           String?     @db.VarChar(100)
  prenom             String?     @db.VarChar(100)
  email              String?     @db.VarChar(255)
  telephonePersoNum  String?     @db.VarChar(50)
  telephoneMobileNum String?     @db.VarChar(50)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  bilantypes         BilanType[] @relation("AuthorBilanTypes")
  patients           Patient[]
  sections           Section[]   @relation("AuthorSections")
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  onboardingDone     Boolean     @default(false)
  onboardingVersion  String      @default("1")
  job                Job?


  @@map("profile")
  @@schema("public")
}

model Patient {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  dob       DateTime?
  notes     String?
  createdAt DateTime  @default(now())
  profileId String    @db.Uuid
  bilans    Bilan[]
  profile   Profile   @relation(fields: [profileId], references: [id])

  @@schema("psychomot")
}

model BilanType {
  id          String             @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean            @default(false)
  authorId    String?            @db.Uuid
  createdAt   DateTime           @default(now())
  bilans      Bilan[]
  author      Profile?           @relation("AuthorBilanTypes", fields: [authorId], references: [id])
  layoutJson  Json?
  sections    BilanTypeSection[]
  job         Job[] @default([])

  shares      BilanTypeShare[]

  @@schema("psychomot")
}

model Section {
  id                String                 @id @default(uuid())
  title             String
  kind              SectionKind
  description       String?
  schema            Json?
  defaultContent    Json?
  isPublic          Boolean                @default(false)
  authorId          String?                @db.Uuid
  createdAt         DateTime               @default(now())
  instances         BilanSectionInstance[]
  bilanTypeSections BilanTypeSection[]
  author            Profile?               @relation("AuthorSections", fields: [authorId], references: [id])
  examples          SectionExample[]
  job               Job[] @default([])

  /// Lien (optionnel) vers un template réutilisable
  templateRefId     String?                @db.VarChar(160)
  templateRef       SectionTemplate?       @relation(fields: [templateRefId], references: [id])

  /// Options d’affichage / variantes propres à cette Section (ex: bulletStyle)
  templateOptions   Json?                  // libre; UI-only
  version           Int                    @default(1)
  shares            SectionShare[]



  @@schema("psychomot")
}

model SectionTemplate {
  id          String   @id @db.VarChar(160)   // ex: "cvp@v1" ou uuid()
  label       String
  version     Int      @default(1)

  /// Toujours du Lexical EditorState JSON (AST) avec d’éventuels SlotNodes
  content     Json

  /// Spéc des slots attendus par ce template :
  /// [{ id, type: "text"|"list"|"kv"|"table", source: "llm"|"computed"|"user", hint?, pattern?, optional? }, ...]
  slotsSpec   Json

  isDeprecated Boolean  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sections    Section[]

  @@schema("psychomot")
}


enum Job {
  PSYCHOMOTRICIEN
  ERGOTHERAPEUTE
  NEUROPSYCHOLOGUE

  @@schema("psychomot")
}

model BilanTypeSection {
  id          String    @id @default(uuid())
  bilanTypeId String
  sectionId   String
  sortOrder   Int
  settings    Json?
  bilanType   BilanType @relation(fields: [bilanTypeId], references: [id], onDelete: Cascade)
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@schema("psychomot")
}

enum ShareRole {
  VIEWER
  EDITOR

  @@schema("psychomot")
}


model BilanTypeShare {
  id            String     @id @default(uuid())
  bilanTypeId   String
  invitedEmail  String?    @db.VarChar(255)
  invitedUserId String?    @db.Uuid
  role          ShareRole  @default(VIEWER)
  createdAt     DateTime   @default(now())

  bilanType     BilanType  @relation(fields: [bilanTypeId], references: [id], onDelete: Cascade)
  invitedUser   User?      @relation("BilanTypeShare_invitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([invitedEmail])
  @@index([invitedUserId])
  @@schema("psychomot")
}


model SectionShare {
  id            String     @id @default(uuid())
  sectionId   String
  invitedEmail  String?    @db.VarChar(255)
  invitedUserId String?    @db.Uuid
  role          ShareRole  @default(VIEWER)
  createdAt     DateTime   @default(now())

  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  invitedUser   User?      @relation("SectionShare_invitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([invitedEmail])
  @@index([invitedUserId])
  @@schema("psychomot")
}


model SectionExample {
  id        String  @id @default(uuid())
  sectionId String
  label     String?
  content   String
  stylePrompt String?
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)


  @@schema("psychomot")
}

model Bilan {
  id              String                 @id @default(uuid())
  title           String?
  patientId       String?
  bilanTypeId     String?
  descriptionJson Json?
  date            DateTime               @default(now())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  bilanType       BilanType?             @relation(fields: [bilanTypeId], references: [id])
  patient         Patient?               @relation(fields: [patientId], references: [id])
  sections        BilanSectionInstance[]

  @@schema("psychomot")
}

model BilanSectionInstance {
  id                String  @id @default(uuid())
  bilanId           String
  sectionId         String
  test              String?
  order             Int
  contentNotes      Json
  notesCreatedAt    DateTime @default(now())
  notesUpdatedAt    DateTime @updatedAt
  
  generatedContent  Json?
  generatedContentCreatedAt    DateTime? @default(now())
  generatedContentUpdatedAt    DateTime? @updatedAt

  // Traçabilité de la génération (utile pour re-render / export)
  templateIdUsed      String?  @db.VarChar(160)   // id du SectionTemplate utilisé
  templateVersionUsed Int?
  
  status            BilanSectionStatus @default(DRAFT)
  bilan             Bilan   @relation(fields: [bilanId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  section           Section @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([bilanId, order])
  @@schema("psychomot")
}

enum BilanSectionStatus {
  DRAFT
  GENERATED
  REFINED
  PUBLISHED

  @@schema("psychomot")
}

enum Civilite {
  M
  MME
  MLLE

  @@schema("public")
}

enum UserRole {
  THERAPIST

  @@schema("public")
}

enum SectionKind {
  anamnese
  tests_standards
  observations
  profil_sensoriel
  bilan_complet
  CUSTOM_FORM
  conclusion

  @@schema("psychomot")
}
