// 1. Source de données
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL")
  schemas  = ["public", "gestion", "psychomot"]
}

// 2. Générateur de client
generator clientPublic {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

enum Civilite {
  M    // Monsieur
  MME  // Madame
  MLLE // Mademoiselle

  @@schema("public")
}

//Profile
model Profile {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String    @db.Uuid
  civilite            Civilite?
  nom                 String?   @db.VarChar(100)
  nomUsage            String?   @db.VarChar(100)
  prenom              String?   @db.VarChar(100)
  email               String?   @db.VarChar(255)
  telephonePersoNum   String?   @db.VarChar(50)
  telephoneMobileNum  String?   @db.VarChar(50)

  patients      Patient[]
  bilantypes    BilanType[] @relation("AuthorBilanTypes") 
  sections      Section[]    @relation("AuthorSections")

  @@map("profile")
  @@schema("public")

}

// -------------- ENUMS --------------


model Patient {
  id        String   @id @default(uuid())
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid // -> multi‑tenant : 1 psy == 1 tenant
  firstName String
  lastName  String
  dob       DateTime?
  notes     String?

  bilans    Bilan[]

  createdAt DateTime  @default(now())

  @@schema("psychomot")

}

// -------------- BILAN TEMPLATES --------------
model BilanType {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)

  author      Profile?    @relation("AuthorBilanTypes", fields: [authorId], references: [id])
  authorId    String? @db.Uuid

  bilans      Bilan[]     
  sections    BilanTypeSection[]

  createdAt   DateTime @default(now())

  @@schema("psychomot")

}

enum SectionKind {
  NARRATIVE      // Anamnèse, Observations cliniques…
  STANDARD_TEST  // NPMOT, MABC‑2, etc.
  SENSOR_PROFILE // Ex : Dunn, Sensory Processing Measure
  CUSTOM_FORM    // mix perso

  @@schema("psychomot")

}

model Section {
  id             String      @id @default(uuid())
  title          String
  kind           SectionKind
  description    String?
  // "schema" décrit la structure d’entrée (questions, champs markdown…)
  // Pour kind = NARRATIVE tu peux laisser null ou stocker un placeholder.
  schema         Json?       @db.JsonB

  defaultContent Json?       @db.JsonB   // modèle vierge si tu veux pré‑remplir
  isPublic       Boolean     @default(false)

  author         Profile?       @relation("AuthorSections", fields: [authorId], references: [id])
  authorId       String?     @db.Uuid
  examples       SectionExample[]
  instances      BilanSectionInstance[]
  bilanTypeSections BilanTypeSection[]

  createdAt      DateTime    @default(now())

  @@schema("psychomot")

}


model BilanTypeSection {
  id          String   @id @default(uuid())
  bilanType   BilanType @relation(fields: [bilanTypeId], references: [id])
  bilanTypeId String
  section     Section   @relation(fields: [sectionId], references: [id])
  sectionId   String
  sortOrder   Int
  settings    Json?     // ex : contraintes, score max…

  @@schema("psychomot")

}

// -------------- EXEMPLES (facultatif mais prêt) --------------
model SectionExample {
  id         String   @id @default(uuid())
  section    Section  @relation(fields: [sectionId], references: [id])
  sectionId  String
  label      String?
  content    String   // markdown ou texte simple

  @@schema("psychomot")

}

// -------------- BILAN INSTANCIES --------------
model Bilan {
  id          String   @id @default(uuid())
  patient     Patient?  @relation(fields: [patientId], references: [id])
  patientId   String?

  bilanType   BilanType? @relation(fields: [bilanTypeId], references: [id])
  bilanTypeId String?

  date        DateTime    @default(now())

  sections    BilanSectionInstance[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("psychomot")

}

model BilanSectionInstance {
  id        String   @id @default(uuid())
  bilan     Bilan    @relation(fields: [bilanId], references: [id])
  bilanId   String
  section   Section  @relation(fields: [sectionId], references: [id])
  sectionId String
  order     Int
  content   Json         // Rich text, réponses, scores… tout est sérialisé

  // index composite pour requêtes rapides
  @@index([bilanId, order])

  @@schema("psychomot")
}
